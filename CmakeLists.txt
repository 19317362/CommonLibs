cmake_minimum_required (VERSION 3.1)
project(CommonLibraries)
include(GenerateExportHeader)
include(CMakePackageConfigHelpers)
include(ExternalProject)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "Default Targets")

set(EXTERNAL_CMAKE_PREFIX_PATH "${CMAKE_INSTALL_PREFIX}")

# Set a default build type if none was specified
set(default_build_type "Release")

# If we have a multi config generator only set the first type
if(CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_CONFIGURATION_TYPES_LENGTH)
	list(LENGTH CMAKE_CONFIGURATION_TYPES CMAKE_CONFIGURATION_TYPES_LENGTH)
	if(CMAKE_CONFIGURATION_TYPES_LENGTH GREATER "1")
		set(CONF_TYPE)
		list(GET CMAKE_CONFIGURATION_TYPES 0 CONF_TYPE)
		set(CMAKE_CONFIGURATION_TYPES ${CONF_TYPE} CACHE STRING "Choose the type of build (only one is allowed), options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
	endif()
endif()

set(EXTERNAL_PROJECT_BUILD_TYPE "Unknown")
if(CMAKE_CONFIGURATION_TYPES)
	list(GET CMAKE_CONFIGURATION_TYPES 0 CONF_TYPE)
	set(EXTERNAL_PROJECT_BUILD_TYPE ${CONF_TYPE})
elseif(CMAKE_BUILD_TYPE)
	set(EXTERNAL_PROJECT_BUILD_TYPE ${CMAKE_BUILD_TYPE})
endif()

# Some helper vars to detect if debug or release
if(EXTERNAL_PROJECT_BUILD_TYPE STREQUAL "Debug")
	set(EXTERNAL_PROJECT_IS_DEBUG true)
elseif(EXTERNAL_PROJECT_BUILD_TYPE STREQUAL "Release")
	set(EXTERNAL_PROJECT_IS_RELEASE true)
endif()

# The generator as a string without spaces
set(EXTERNAL_PROJECT_GENERATOR "unknown")
string(REPLACE " " "-" EXTERNAL_PROJECT_GENERATOR ${CMAKE_GENERATOR})

if(MSVC)
	get_filename_component(MY_COMPILER_DIR ${CMAKE_CXX_COMPILER} DIRECTORY)
	find_file(VCVARSALL vcvarsall.bat "${MY_COMPILER_DIR}/.." "${MY_COMPILER_DIR}/../..")
	if(NOT VCVARSALL)
		find_file(VSDEVCMD vsdevcmd.bat "${MY_COMPILER_DIR}/.." "${MY_COMPILER_DIR}/../.." "${MY_COMPILER_DIR}/../../../../../../../Common7/Tools")
		if(VSDEVCMD)
			unset(VCVARSALL CACHE)
		endif()
	else()
		unset(VSDEVCMD CACHE)
	endif()
endif(MSVC)

# Common targets other projects may depend on
set(PERL_PATH "${CMAKE_BINARY_DIR}/Perl/src/Perl/perl/site/bin;${CMAKE_BINARY_DIR}/Perl/src/Perl/perl/bin;${CMAKE_BINARY_DIR}/Perl/src/Perl/c/bin")
ExternalProject_Add(Perl
	PREFIX Perl
	URL http://strawberryperl.com/download/5.26.1.1/strawberry-perl-5.26.1.1-32bit-portable.zip
	CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo "configure dummy"
	BUILD_COMMAND ${CMAKE_COMMAND} -E echo "build dummy"
	INSTALL_COMMAND ${CMAKE_COMMAND} -E echo "install dummy"
)

set(PYTHON_PATH "${CMAKE_BINARY_DIR}/Python/src/Python")
ExternalProject_Add(Python
	PREFIX Python
	URL http://www.python.org/ftp/python/3.7.0/python-3.7.0a4-embed-win32.zip
	CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo "configure dummy"
	BUILD_COMMAND ${CMAKE_COMMAND} -E echo "build dummy"
	INSTALL_COMMAND ${CMAKE_COMMAND} -E echo "install dummy"
)

set(NASM_PATH "${CMAKE_BINARY_DIR}/nasm/src/nasm")
ExternalProject_Add(nasm
	PREFIX nasm
	URL http://www.nasm.us/pub/nasm/releasebuilds/2.13/win32/nasm-2.13-win32.zip
	CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo "configure dummy"
	BUILD_COMMAND ${CMAKE_COMMAND} -E echo "build dummy"
	INSTALL_COMMAND ${CMAKE_COMMAND} -E echo "install dummy"
)

# A macro used to include the lib build scripts ans set some basic vars
macro(include_and_prepare script)
	get_filename_component(EXTERNAL_PROJECT_NAME ${script} NAME_WE)
	set(EXTERNAL_PROJECT_PREFIX ${EXTERNAL_PROJECT_NAME}_${EXTERNAL_PROJECT_GENERATOR}_${EXTERNAL_PROJECT_BUILD_TYPE})
	set(EXTERNAL_PROJECT_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/${EXTERNAL_PROJECT_PREFIX})
	set(EXTERNAL_PROJECT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${EXTERNAL_PROJECT_PREFIX})
	include(${script})
	set(EXTERNAL_CMAKE_PREFIX_PATH "${EXTERNAL_CMAKE_PREFIX_PATH};${EXTERNAL_PROJECT_INSTALL_DIR}")
	set(EXTERNAL_LIB_PATH "${EXTERNAL_LIB_PATH};${EXTERNAL_PROJECT_INSTALL_DIR}/lib;${EXTERNAL_PROJECT_INSTALL_DIR}/bin")
	set(EXTERNAL_BIN_PATH "${EXTERNAL_BIN_PATH};${EXTERNAL_PROJECT_INSTALL_DIR}/bin")
	set(EXTERNAL_INCLUDE_PATH "${EXTERNAL_INCLUDE_PATH};${EXTERNAL_PROJECT_INSTALL_DIR}/include")
	set(EXTERNAL_CMAKE_PREFIX_PATH_REL "${EXTERNAL_CMAKE_PREFIX_PATH_REL};${EXTERNAL_PROJECT_PREFIX}")
	set(EXTERNAL_LIB_PATH_REL "${EXTERNAL_LIB_PATH_REL};${EXTERNAL_PROJECT_PREFIX}/lib;${EXTERNAL_PROJECT_PREFIX}/bin")
	set(EXTERNAL_BIN_PATH_REL "${EXTERNAL_BIN_PATH_REL};${EXTERNAL_PROJECT_PREFIX}/bin")
	set(EXTERNAL_INCLUDE_PATH_REL "${EXTERNAL_INCLUDE_PATH_REL};${EXTERNAL_PROJECT_PREFIX}/include")
endmacro(include_and_prepare)

include_and_prepare(zlib.cmake)
include_and_prepare(OpenSSL.cmake)
include_and_prepare(Qt5.cmake)
include_and_prepare(ECM.cmake)
include_and_prepare(KF5Kirigami2.cmake)
include_and_prepare(FFmpeg.cmake)
include_and_prepare(QtAV.cmake)

# Write a script file that sets some basic linker compiler search paths.
file(WRITE ${CMAKE_BINARY_DIR}/setSearchEnv.bat
"
set PATH=${EXTERNAL_BIN_PATH};${PYTHON_PATH};${PERL_PATH};${NASM_PATH};%PATH%
set LIB=${EXTERNAL_LIB_PATH};%LIB%
set INCLUDE=${EXTERNAL_INCLUDE_PATH};%INCLUDE%
set LIBRARY_PATH=${EXTERNAL_LIB_PATH};%LIBRARY_PATH%
set CPATH=${EXTERNAL_INCLUDE_PATH};%CPATH%
set CMAKE_PREFIX_PATH=${EXTERNAL_CMAKE_PREFIX_PATH};%CMAKE_PREFIX_PATH%
"
)

# Write a script file that sets the msvc environment for vs 2013.
if(VCVARSALL)
	# x86 | amd64 | arm | x86_amd64 | x86_arm | amd64_x86 | amd64_arm
	# x86 | amd64: native host
	# other: cross host
	if (CMAKE_SIZEOF_VOID_P MATCHES "8")
		set(VCVARSALL_OPTION "amd64")
	else()
		set(VCVARSALL_OPTION "x86")
	endif()
	file(WRITE ${CMAKE_BINARY_DIR}/setMsvcEnv.bat
	"
	call \"${VCVARSALL}\" ${VCVARSALL_OPTION}
	"
	)
endif()

# Write a script file that sets the msvc environment for vs 2015 and above.
if(VSDEVCMD)
	# x86 | amd64 | arm | x86_amd64 | x86_arm | amd64_x86 | amd64_arm
	# x86 | amd64: native host
	# other: cross host
	if (CMAKE_SIZEOF_VOID_P MATCHES "8")
		set(VSDEVCMD_OPTION "amd64")
	else()
		set(VSDEVCMD_OPTION "x86")
	endif()
	file(WRITE ${CMAKE_BINARY_DIR}/setMsvcEnv.bat
	"
	call \"${VSDEVCMD}\" -arch=${VSDEVCMD_OPTION} -no_logo
	"
	)
endif()

set(CMAKE_INSTALL_DIR "cmake")
configure_package_config_file("${CMAKE_SOURCE_DIR}/commonLibsConfig.cmake.in" "${CMAKE_BINARY_DIR}/commonLibsConfig.cmake" INSTALL_DESTINATION cmake
							  PATH_VARS CMAKE_INSTALL_DIR)
configure_file("${CMAKE_SOURCE_DIR}/commonLibs.cmake.in" "${CMAKE_BINARY_DIR}/commonLibs_${EXTERNAL_PROJECT_BUILD_TYPE}.cmake" @ONLY)

install(FILES "${CMAKE_BINARY_DIR}/commonLibsConfig.cmake" "${CMAKE_BINARY_DIR}/commonLibs_${EXTERNAL_PROJECT_BUILD_TYPE}.cmake" DESTINATION cmake)
